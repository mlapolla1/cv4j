/*
 * Copyright (c) 2017-present, CV4J Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cv4j.core.datamodel.lut;

/**
 * The filter which is consists of colors that are shades of cyan and magenta.
 * It varies smoothly from cyan to magenta.
 * <p>
 * For more information please see:
 * <a target="_blank" href="http://baike.baidu.com/link?url=kysXstK853g0mEbTgPIdkrqO5qTTbgfW-B0O1FJP4MYYzp
 * G5_6E_LlaP_6T9XTn2c97Ge6hJUojJzkppCdnO-mJxIee_XsNASTsy82RaQZe">About ColorMap</a> <p>
 * Or see:
 * <a target="_blank" href="http://matlab.izmiran.ru/help/techdoc/ref/colormap.html">MATLAB Function Reference - colormap</a>
 *
 */
public final class CoolLUT {
    /**
     * List of cool lut
     */
    private static  final int[][] COOL_LUT = new int[][]{
            {0, 255, 255}, {0, 254, 255}, {1, 253, 255}, {3, 252, 255}, {4, 251, 255},
            {5, 250, 255}, {7, 248, 255}, {7, 248, 255}, {8, 247, 254}, {8, 247, 254},
            {11, 245, 255}, {11, 245, 255}, {12, 242, 255}, {12, 242, 255}, {15, 241, 255},
            {14, 240, 254}, {16, 239, 255}, {16, 239, 255}, {18, 237, 255}, {19, 236, 255},
            {20, 235, 255}, {22, 234, 255}, {24, 233, 255}, {23, 232, 255}, {25, 231, 255},
            {25, 231, 255}, {27, 228, 255}, {27, 228, 255}, {29, 227, 255}, {28, 226, 255},
            {30, 225, 255}, {30, 225, 255}, {33, 223, 255}, {32, 222, 254}, {34, 221, 255},
            {34, 221, 255}, {37, 219, 255}, {36, 218, 255}, {39, 217, 255}, {39, 217, 255},
            {39, 215, 255}, {39, 215, 255}, {42, 213, 255}, {43, 212, 255}, {44, 211, 255},
            {45, 210, 255}, {48, 208, 255}, {47, 207, 255}, {50, 206, 255}, {50, 206, 255},
            {50, 204, 254}, {50, 204, 254}, {52, 204, 254}, {51, 203, 253}, {54, 201, 255},
            {55, 200, 255}, {56, 199, 255}, {57, 198, 254}, {60, 196, 255}, {60, 196, 255},
            {61, 195, 255}, {60, 194, 255}, {61, 193, 255}, {61, 193, 255}, {63, 191, 254},
            {63, 191, 254}, {66, 189, 255}, {66, 188, 255}, {68, 187, 255}, {69, 186, 255},
            {72, 184, 255}, {71, 183, 255}, {72, 183, 255}, {72, 183, 255}, {74, 180, 254},
            {74, 180, 254}, {77, 179, 254}, {77, 179, 254}, {77, 177, 253}, {77, 177, 253},
            {80, 175, 255}, {79, 174, 255}, {82, 173, 255}, {82, 173, 255}, {85, 171, 255},
            {84, 170, 255}, {87, 169, 255}, {87, 169, 255}, {87, 167, 254}, {87, 167, 254},
            {90, 165, 255}, {91, 164, 255}, {92, 163, 255}, {93, 162, 255}, {96, 161, 255},
            {95, 160, 254}, {98, 158, 255}, {98, 158, 255}, {99, 157, 255}, {98, 156, 255},
            {100, 155, 255}, {100, 155, 255}, {102, 154, 255}, {103, 152, 255}, {104, 151, 255},
            {106, 150, 255}, {107, 148, 255}, {107, 148, 255}, {109, 147, 255}, {108, 146, 255},
            {109, 145, 255}, {109, 145, 255}, {111, 143, 254}, {111, 143, 254}, {114, 141, 255},
            {115, 140, 255}, {116, 139, 255}, {117, 138, 255}, {120, 137, 255}, {119, 136, 254},
            {120, 134, 255}, {120, 134, 255}, {123, 133, 255}, {122, 132, 255}, {125, 131, 255},
            {125, 131, 255}, {126, 130, 255}, {125, 129, 255}, {128, 127, 255}, {128, 127, 255},
            {130, 125, 254}, {131, 124, 254}, {133, 123, 254}, {133, 122, 253}, {134, 120, 255},
            {134, 120, 255}, {137, 119, 255}, {136, 118, 254}, {138, 117, 255}, {139, 116, 255},
            {140, 116, 255}, {141, 114, 255}, {144, 112, 255}, {144, 112, 255}, {144, 111, 254},
            {144, 111, 254}, {147, 109, 255}, {146, 108, 255}, {149, 107, 255}, {149, 107, 255},
            {151, 105, 255}, {150, 104, 255}, {152, 103, 255}, {152, 103, 255}, {154, 101, 254},
            {155, 100, 254}, {156, 99, 254}, {158, 98, 254}, {160, 96, 253}, {160, 96, 253}, {160, 95, 255},
            {159, 94, 255}, {161, 93, 255}, {163, 92, 255}, {164, 91, 255}, {165, 90, 255}, {167, 88, 255},
            {167, 88, 255}, {169, 86, 254}, {169, 86, 254}, {171, 85, 255}, {171, 85, 255}, {172, 82, 255},
            {172, 82, 255}, {175, 81, 255}, {174, 80, 254}, {176, 79, 255}, {176, 79, 255}, {177, 77, 255},
            {179, 76, 255}, {180, 75, 255}, {182, 74, 255}, {183, 72, 255}, {183, 72, 255}, {185, 71, 255},
            {184, 70, 254}, {187, 68, 255}, {187, 68, 255}, {189, 67, 255}, {188, 66, 255}, {191, 64, 255},
            {191, 64, 255}, {193, 62, 254}, {193, 62, 254}, {195, 61, 255}, {194, 60, 255}, {196, 58, 255},
            {196, 58, 255}, {199, 57, 255}, {198, 56, 254}, {200, 55, 255}, {200, 55, 255}, {202, 53, 255},
            {203, 52, 255}, {204, 51, 255}, {206, 50, 255}, {207, 48, 255}, {207, 48, 255}, {210, 46, 255},
            {209, 45, 254}, {211, 44, 254}, {211, 44, 254}, {212, 44, 254}, {211, 43, 253}, {214, 41, 255},
            {215, 40, 255}, {217, 39, 255}, {217, 38, 254}, {220, 36, 255}, {220, 36, 255}, {220, 34, 255},
            {220, 34, 255}, {222, 34, 255}, {222, 34, 255}, {223, 31, 254}, {223, 31, 254}, {226, 29, 255},
            {227, 28, 255}, {228, 27, 255}, {229, 26, 255}, {232, 24, 255}, {231, 23, 255}, {233, 23, 255},
            {232, 22, 255}, {234, 20, 255}, {234, 20, 255}, {237, 19, 255}, {236, 18, 254}, {239, 16, 254},
            {239, 16, 254}, {242, 14, 255}, {241, 13, 255}, {242, 13, 255}, {242, 13, 255}, {244, 10, 255},
            {244, 10, 255}, {247, 9, 255}, {247, 9, 255}, {247, 7, 254}, {247, 7, 254}, {250, 5, 255},
            {250, 4, 255}, {252, 3, 255}, {253, 2, 255}, {255, 1, 255}, {255, 0, 254}
    };

    public static int[][] getCoolLut() {
        return COOL_LUT;
    }
}
