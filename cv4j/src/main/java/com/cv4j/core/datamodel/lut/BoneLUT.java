/*
 * Copyright (c) 2017-present, CV4J Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cv4j.core.datamodel.lut;

/**
 * The filter which is a grayscale colormap with a higher value for the blue component.
 * This colormap is useful for adding an "electronic" look to grayscale images.
 * <p>
 * For more information please see:
 * <a target="_blank" href="http://baike.baidu.com/link?url=kysXstK853g0mEbTgPIdkrqO5qTTbgfW-B0O1FJP4MYYzp
 * G5_6E_LlaP_6T9XTn2c97Ge6hJUojJzkppCdnO-mJxIee_XsNASTsy82RaQZe">About ColorMap</a> <p>
 * Or see:
 * <a target="_blank" href="http://matlab.izmiran.ru/help/techdoc/ref/colormap.html">MATLAB Function Reference - colormap</a>
 *
 */
public final class BoneLUT {
	/**
	 * List of bone lut
	 */
	private static final int[][] BONE_LUT = new int[][]{
			{0, 0, 0}, {1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {4, 4, 4}, {4, 4, 4},
			{5, 5, 7}, {6, 6, 8}, {7, 7, 9}, {8, 8, 10}, {9, 8, 13}, {10, 9, 14},
			{11, 10, 15}, {12, 11, 16}, {13, 12, 17}, {14, 13, 18}, {15, 14, 19},
			{16, 15, 20}, {17, 16, 22}, {18, 17, 23}, {18, 19, 24}, {18, 19, 24},
			{19, 19, 27}, {20, 20, 28}, {21, 21, 29}, {22, 22, 30}, {23, 23, 31},
			{24, 24, 32}, {25, 25, 33}, {25, 25, 33}, {26, 26, 34}, {27, 27, 35},
			{28, 28, 38}, {29, 29, 39}, {30, 30, 40}, {31, 31, 41}, {32, 32, 42},
			{32, 32, 42}, {33, 33, 45}, {34, 34, 46}, {35, 35, 47}, {37, 37, 49},
			{38, 37, 51}, {39, 38, 52}, {40, 39, 55}, {40, 39, 55}, {41, 40, 56},
			{42, 41, 57}, {43, 42, 58}, {44, 43, 59}, {45, 44, 60}, {46, 45, 61},
			{47, 46, 62}, {47, 46, 62}, {48, 47, 65}, {49, 48, 66}, {48, 49, 67},
			{49, 50, 68}, {50, 51, 71}, {51, 52, 72}, {52, 53, 73}, {52, 53, 73},
			{53, 54, 74}, {54, 55, 75}, {55, 56, 76}, {57, 58, 78}, {58, 59, 80},
			{59, 60, 81}, {60, 61, 82}, {60, 61, 82}, {61, 61, 85}, {62, 62, 86},
			{63, 63, 87}, {64, 64, 88}, {65, 65, 89}, {66, 66, 90}, {67, 67, 91},
			{67, 67, 91}, {68, 68, 92}, {69, 69, 93}, {70, 70, 96}, {71, 71, 97},
			{72, 72, 98}, {73, 73, 99}, {73, 73, 99}, {74, 74, 100}, {75, 75, 103},
			{76, 76, 104}, {77, 76, 107}, {78, 77, 108}, {79, 78, 109}, {80, 79, 110},
			{80, 81, 111}, {81, 82, 112}, {82, 83, 114}, {83, 84, 115}, {84, 85, 116},
			{85, 86, 117}, {86, 87, 118}, {87, 88, 119}, {88, 89, 120}, {89, 90, 121},
			{90, 91, 121}, {91, 92, 122}, {90, 94, 123}, {91, 95, 124}, {92, 96, 123},
			{93, 97, 124}, {94, 100, 126}, {95, 101, 127}, {96, 102, 128}, {97, 103, 129},
			{98, 104, 130}, {99, 105, 131}, {100, 106, 132}, {101, 107, 133}, {102, 108, 132},
			{103, 109, 133}, {103, 111, 134}, {104, 112, 135}, {105, 113, 136}, {106, 114, 137},
			{106, 117, 139}, {107, 118, 140}, {108, 119, 141}, {109, 120, 142}, {110, 121, 143},
			{111, 122, 144}, {112, 123, 143}, {112, 123, 143}, {114, 125, 145}, {115, 126, 146},
			{116, 127, 147}, {117, 128, 148}, {117, 130, 149}, {118, 131, 150}, {119, 132, 149},
			{121, 134, 151}, {120, 136, 152}, {121, 137, 153}, {122, 138, 154}, {122, 138, 154},
			{124, 140, 156}, {125, 141, 157}, {125, 142, 158}, {126, 143, 159}, {128, 145, 161},
			{129, 146, 162}, {129, 147, 161}, {130, 148, 162}, {131, 149, 163}, {133, 151, 165},
			{134, 152, 166}, {135, 153, 167}, {135, 154, 168}, {136, 155, 169}, {137, 157, 168},
			{138, 158, 169}, {139, 159, 170}, {140, 160, 171}, {139, 161, 172}, {141, 163, 174},
			{142, 164, 175}, {142, 164, 175}, {143, 165, 176}, {144, 166, 177}, {145, 170, 177},
			{146, 171, 178}, {147, 172, 179}, {148, 173, 180}, {149, 174, 179}, {150, 175, 180},
			{151, 176, 181}, {152, 177, 182}, {153, 178, 183}, {154, 179, 184}, {153, 181, 185},
			{154, 182, 186}, {155, 183, 187}, {156, 184, 188}, {158, 186, 190}, {159, 187, 191},
			{159, 189, 191}, {160, 190, 192}, {161, 191, 193}, {162, 192, 194}, {162, 193, 195},
			{163, 194, 196}, {164, 195, 197}, {165, 196, 198}, {166, 197, 199}, {167, 198, 200},
			{169, 201, 200}, {170, 202, 201}, {171, 203, 202}, {172, 204, 203}, {173, 203, 203},
			{174, 204, 204}, {176, 206, 206}, {177, 207, 207}, {179, 207, 208}, {180, 208, 209},
			{183, 209, 210}, {184, 210, 211}, {185, 211, 210}, {186, 212, 211}, {188, 214, 213},
			{188, 214, 213}, {190, 214, 216}, {191, 215, 217}, {194, 215, 216}, {195, 216, 217},
			{196, 217, 218}, {197, 218, 219}, {199, 219, 218}, {200, 220, 219}, {201, 221, 220},
			{202, 222, 221}, {204, 222, 222}, {205, 223, 223}, {206, 224, 224}, {207, 225, 225},
			{210, 226, 226}, {211, 227, 227}, {210, 228, 228}, {212, 230, 230}, {215, 231, 231},
			{216, 232, 232}, {219, 230, 232}, {220, 231, 233}, {221, 233, 233}, {222, 234, 234},
			{223, 235, 235}, {225, 237, 237}, {227, 239, 239}, {227, 239, 239}, {228, 238, 239},
			{229, 239, 240}, {232, 240, 242}, {233, 241, 243}, {234, 243, 242}, {235, 244, 243},
			{238, 244, 244}, {239, 245, 245}, {240, 246, 246}, {241, 247, 247}, {243, 247, 248},
			{244, 248, 249}, {245, 249, 250}, {246, 250, 251}, {249, 250, 252}, {250, 251, 253},
			{251, 253, 252}, {252, 254, 253}, {254, 254, 254}, {255, 255, 255}
	};

	public static int[][] getBoneLut() {
		return BONE_LUT;
	}
}
